import{_ as t,c as a,d as i,a as n,e as r,o as c}from"./app-CbuCPX2R.js";const s="/blog/images/technology/vue3/%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.jpeg",l={};function d(p,e){const o=r("ArticleNavigation");return c(),a("div",null,[i(o,{showBreadcrumb:!0,showRelatedArticles:!1}),e[0]||(e[0]=n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Vue3 是一个采用 TypeScript 构建的现代化前端框架，其源码在架构设计上实现了高度的模块化和可扩展性。整个项目采用 <code>monorepo</code> 架构管理，核心由三大系统构成：<strong>响应式系统</strong>、<strong>编译器系统</strong>和<strong>运行时系统</strong>。这三大系统协同工作，将用户编写的模板和逻辑高效地转换为可交互的、高性能的 Web 界面。</p><ul><li><strong>@vue/reactivity</strong>: 提供了与框架无关、可独立使用的响应式能力。</li><li><strong>@vue/compiler-core</strong>: 负责将模板字符串编译为渲染函数。</li><li><strong>@vue/runtime-core</strong>: 包含渲染器、虚拟 DOM、组件系统和生命周期等核心运行时功能。</li></ul><hr><h2 id="一、响应式系统-reactivity-system" tabindex="-1"><a class="header-anchor" href="#一、响应式系统-reactivity-system"><span>一、响应式系统 (Reactivity System)</span></a></h2><p>响应式系统是 Vue 的心脏，它使得数据状态的变化能够被自动侦测并反映到视图上。Vue 3 彻底重构了这一系统，用 ES6 <code>Proxy</code> 替代了 Vue 2 的 <code>Object.defineProperty</code>。</p><h3 id="_1-1-核心思想与流程" tabindex="-1"><a class="header-anchor" href="#_1-1-核心思想与流程"><span>1.1 核心思想与流程</span></a></h3><ol><li><strong>数据劫持</strong>: 通过 <code>reactive()</code> 函数，使用 <code>Proxy</code> 创建一个代理对象来包装原始数据。</li><li><strong>依赖收集 (Track)</strong>: 当一个 <code>effect</code> (副作用，如组件的渲染函数) 运行时，会访问代理对象的属性。这会触发 <code>Proxy</code> 的 <code>get</code> 陷阱，进而调用 <code>track</code> 函数，将当前的 <code>effect</code> 与被访问的属性进行关联。</li><li><strong>派发更新 (Trigger)</strong>: 当代理对象的属性被修改时，会触发 <code>Proxy</code> 的 <code>set</code> 陷阱，进而调用 <code>trigger</code> 函数，找到所有依赖该属性的 <code>effect</code> 并重新执行它们。</li></ol><h3 id="_1-2-核心数据结构-依赖地图" tabindex="-1"><a class="header-anchor" href="#_1-2-核心数据结构-依赖地图"><span>1.2 核心数据结构：依赖地图</span></a></h3><p>为了精确地存储依赖关系，Vue 3 设计了一个三层嵌套的 <code>WeakMap -&gt; Map -&gt; Set</code> 结构。</p><blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>WeakMap&lt;target, Map&lt;key, Set&lt;effect&gt;&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>WeakMap {</span></span>
<span class="line"><span>  target1 (原始对象): Map {</span></span>
<span class="line"><span>    &#39;property1&#39; (属性名): Set { effect1, effect2 },</span><span> // 依赖该属性的 effect 集合</span></span>
<span class="line"><span>    &#39;property2&#39;: Set { effect3 }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  target2: Map { ... }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li><strong>WeakMap</strong>: 键是原始对象，值为 <code>Map</code>。使用 <code>WeakMap</code> 可以防止内存泄漏，当原始对象被垃圾回收时，对应的依赖关系也会被自动清除。</li><li><strong>Map</strong>: 键是属性名，值为 <code>Set</code>。</li><li><strong>Set</strong>: 存储所有依赖该属性的 <code>ReactiveEffect</code> 实例，<code>Set</code> 的特性保证了 <code>effect</code> 的唯一性。</li></ul><h3 id="_1-3-核心-api-实现" tabindex="-1"><a class="header-anchor" href="#_1-3-核心-api-实现"><span>1.3 核心 API 实现</span></a></h3><ul><li><p><strong><code>reactive(target)</code></strong>:</p><ul><li><strong>作用</strong>: 将复杂数据类型（对象、数组）转换为深度响应式代理。</li><li><strong>实现</strong>: 内部调用 <code>createReactiveObject</code>，使用 <code>Proxy</code> 和 <code>Reflect</code> 进行数据劫持。通过一个全局的 <code>reactiveMap</code> (WeakMap) 缓存已创建的代理，确保同一个对象只被代理一次，保证了单例和引用一致性。</li></ul></li><li><p><strong><code>ref(value)</code></strong>:</p><ul><li><strong>作用</strong>: 为原始值（string, number, boolean）或对象创建一个响应式的引用。</li><li><strong>实现</strong>: 本质是将其包装在一个 <code>RefImpl</code> 类的实例中，通过访问器属性 <code>.value</code> 的 <code>get</code> 和 <code>set</code> 来分别调用 <code>trackRefValue</code> 和 <code>triggerRefValue</code>。如果 <code>ref</code> 包装的是一个对象，其内部会自动调用 <code>reactive</code> 进行深度转换。</li></ul></li><li><p><strong><code>computed(getter)</code></strong>:</p><ul><li><strong>作用</strong>: 创建一个计算属性，其结果会被缓存，仅在依赖项变化时才重新计算。</li><li><strong>实现</strong>: 内部也是一个 <code>ReactiveEffect</code>，但其调度器 (<code>scheduler</code>) 的作用是在依赖变化时不立即重新计算，而是将一个 <code>_dirty</code> 标记设为 <code>true</code>。只有当用户再次访问 <code>.value</code> 且 <code>_dirty</code> 为 <code>true</code> 时，才会执行计算。这实现了<strong>惰性求值 (Lazy Evaluation)</strong> 和缓存。</li></ul></li><li><p><strong><code>effect(fn, options)</code></strong>:</p><ul><li><strong>作用</strong>: 创建一个副作用函数，它会立即执行并自动收集其执行期间访问的所有响应式依赖。</li><li><strong>实现</strong>: 关键在于 <code>ReactiveEffect</code> 类。在执行其 <code>run</code> 方法时，会先将自身实例赋值给一个全局变量 <code>activeEffect</code>，然后执行用户传入的 <code>fn</code>。<code>fn</code> 中对响应式数据的访问会触发 <code>track</code>，<code>track</code> 正是收集这个 <code>activeEffect</code>。执行完毕后，<code>activeEffect</code> 会被清空。</li></ul></li></ul><hr><h2 id="二、编译器系统-compiler-system" tabindex="-1"><a class="header-anchor" href="#二、编译器系统-compiler-system"><span>二、编译器系统 (Compiler System)</span></a></h2><p>编译器负责将用户编写的模板（Template）转换为浏览器可执行的渲染函数（Render Function），这是 Vue 实现“声明式渲染”和进行大量性能优化的关键。</p><h3 id="_2-1-核心编译流程-三阶段" tabindex="-1"><a class="header-anchor" href="#_2-1-核心编译流程-三阶段"><span>2.1 核心编译流程 (三阶段)</span></a></h3><p><code>Template String → Parse → AST → Transform → Optimized AST → Generate → Render Function</code></p><ol><li><p><strong>解析 (Parse)</strong>:</p><ul><li><strong>作用</strong>: 将模板字符串解析为抽象语法树 (AST)。</li><li><strong>实现</strong>: 采用<strong>递归下降解析器 (Recursive Descent Parser)</strong>，逐字扫描模板字符串，识别标签、属性、指令、插值、文本等，并构建成层级的 AST 节点树。</li></ul></li><li><p><strong>转换 (Transform)</strong>:</p><ul><li><strong>作用</strong>: 遍历并操作 AST，进行优化和转换，为代码生成做准备。</li><li><strong>实现</strong>: 采用<strong>深度优先遍历</strong>访问 AST 节点。在遍历过程中，会执行一系列可插拔的转换函数（<code>nodeTransforms</code>），例如处理 <code>v-if</code>、<code>v-for</code> 等指令，合并相邻的文本节点等。</li><li><strong>核心优化</strong>: <ul><li><strong>静态提升 (Static Hoisting)</strong>: 将纯静态的 VNode 提升到渲染函数外部，避免在每次渲染时重复创建。</li><li><strong>Patch Flags</strong>: 在编译时分析节点的动态部分（如动态 class、style、props 等），并用一个数字（位掩码）进行标记。在运行时 <code>patch</code> 阶段，渲染器只需对比标记的动态部分，大大减少了 Diff 的工作量。</li></ul></li></ul></li><li><p><strong>生成 (Generate)</strong>:</p><ul><li><strong>作用</strong>: 将优化后的 AST 转换为渲染函数的代码字符串。</li><li><strong>实现</strong>: 遍历优化后的 AST，拼接成最终的 <code>render</code> 函数代码。这个函数接收 <code>_ctx</code> (渲染上下文) 和 <code>_cache</code> (缓存) 作为参数。</li></ul></li></ol><hr><h2 id="三、运行时系统-runtime-system" tabindex="-1"><a class="header-anchor" href="#三、运行时系统-runtime-system"><span>三、运行时系统 (Runtime System)</span></a></h2><p>运行时系统负责执行由编译器生成的渲染函数，管理组件的生命周期、渲染和更新。</p><h3 id="_3-1-核心组成" tabindex="-1"><a class="header-anchor" href="#_3-1-核心组成"><span>3.1 核心组成</span></a></h3><ul><li><p><strong>虚拟 DOM (VNode)</strong>:</p><ul><li>用 JavaScript 对象来描述真实 DOM 节点的结构。<code>h()</code> 函数是创建 VNode 的主要方式。</li><li><strong>ShapeFlags</strong>: VNode 中一个重要的属性，使用位运算来高效判断节点及其子节点的类型（如元素、组件、文本子节点、数组子节点等），避免了运行时的动态类型检查。</li></ul></li><li><p><strong>渲染器 (Renderer)</strong>:</p><ul><li><strong>跨平台设计</strong>: Vue 3 的渲染器是平台无关的。它通过 <code>createRenderer</code> 函数接收一个包含平台特定操作（如创建元素、插入节点、设置属性等）的 <code>RendererOptions</code> 对象，从而可以渲染到不同平台（如 DOM、Canvas、SSR 等）。</li><li><strong>核心 <code>patch</code> 函数</strong>: 这是渲染器的核心，负责对比新旧 VNode 并将变化应用到真实 DOM。它根据 VNode 的类型和 <code>shapeFlag</code> 采取不同的处理策略。</li></ul></li><li><p><strong>组件系统</strong>:</p><ul><li>管理组件实例的创建、<code>setup</code> 函数的执行、<code>props</code> 和 <code>slots</code> 的处理，以及生命周期钩子的注册和调用。</li><li>组件的挂载 (<code>mountComponent</code>) 和更新 (<code>updateComponent</code>) 流程都围绕着 <code>setupRenderEffect</code> 展开，该函数创建了一个渲染 <code>effect</code>，将组件的渲染过程与响应式系统连接起来。</li></ul></li><li><p><strong>调度系统 (Scheduler)</strong>:</p><ul><li><strong>作用</strong>: 控制和优化更新时机，将多次同步的更新合并为一次异步的批量更新。</li><li><strong>实现</strong>: 当 <code>trigger</code> 触发更新时，相关的 <code>effect</code> 并不会立即执行，而是被放入一个队列中。Vue 使用 <code>Promise.resolve().then()</code> (微任务) 来异步地、批量地刷新这个队列，从而避免了不必要的重复渲染。</li></ul></li></ul><hr><h2 id="四、核心工作流程串联" tabindex="-1"><a class="header-anchor" href="#四、核心工作流程串联"><span>四、核心工作流程串联</span></a></h2><p>以下是 Vue 3 从模板到最终视图更新的完整工作流程：</p><ol><li>构建编译：将 template 模版字符串通过编译器进行 Parse -&gt; Transform -&gt; Generate 转化为一个优化过的、可执行的 render 函数</li><li>挂载阶段（Runtime + Reactivity） <ol><li>初始化组件，创建组件实例，获取 setup 返回的属性和方法</li><li>创建渲染 render 并首次执行挂载，执行 effect</li><li>render 访问响应式数据，触发 track 收集依赖</li><li>返回 VNode 树并通过 patch 生成真实 DOM，插入到页面容器中（挂载完毕）</li></ol></li><li>更新阶段（Runtime + Reactivity） <ol><li>数据修改触发 trigger，调度器将 effect 交给调度器（Scheduler），最后加入微任务</li><li>微任务重新执行 render ，生成新 VNode</li><li>patch对比新旧节点，最小化更新 DOM，完成视图更新</li></ol></li></ol><h2 id="五、设计模式与架构特点" tabindex="-1"><a class="header-anchor" href="#五、设计模式与架构特点"><span>五、设计模式与架构特点</span></a></h2><h3 id="核心设计模式" tabindex="-1"><a class="header-anchor" href="#核心设计模式"><span>核心设计模式:</span></a></h3><ul><li>观察者模式: 响应式系统的依赖收集与通知。</li><li>代理模式: 使用 Proxy 对象属性访问的拦截。</li><li>工厂模式: createRenderer 根据不同平台的配置创建不同的渲染器。</li><li>策略模式: patch 函数根据不同的 VNode 类型选择不同的处理策略。</li><li>单例模式: 如 activeEffect 作为一个全局单例来追踪当前 effect。</li></ul><h3 id="整体架构优势" tabindex="-1"><a class="header-anchor" href="#整体架构优势"><span>整体架构优势:</span></a></h3><ul><li>高性能: 编译时优化（静态提升、Patch Flags）与运行时优化（Proxy、高效 Diff 算法）相结合。</li><li>可维护性与扩展性: monorepo 架构、模块化设计、平台无关的渲染器以及可插拔的编译器转换插件，使得框架易于维护和扩展。</li><li>类型安全: 完全使用 TypeScript 编写，提供了强大的类型支持，提升了代码的健壮性。</li><li>Tree-shaking 友好: API 设计充分考虑了按需引入，有助于减小最终打包体积。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Vue 3 的源码是一套设计精良、高度工程化的现代前端框架典范。它通过基于 Proxy 的精确响应式系统、高度优化的编译器以及灵活可扩展的运行时，实现了性能与开发体验的完美平衡。理解其核心逻辑，不仅能帮助我们更好地使用 Vue，也能为我们自己的软件工程实践提供宝贵的启示。</p><p><img src="`+s+'" alt="图片描述"></p>',37))])}const h=t(l,[["render",d]]),u=JSON.parse('{"path":"/technology/vue3-origin-part1/","title":"Vue3源码总结（一）核心描述","lang":"zh-CN","frontmatter":{"title":"Vue3源码总结（一）核心描述","createTime":"2025/08/03 10:14:19","description":"Vue3源码总结（一）核心描述","tags":["Vue3","technology"],"categories":["前端开发"],"permalink":"/technology/vue3-origin-part1/","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3源码总结（一）核心描述\\",\\"image\\":[\\"https://avicii13579.github.io/blog/blog/images/technology/vue3/核心实现逻辑深度解析.jpeg\\"],\\"dateModified\\":\\"2025-08-03T10:57:33.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://avicii13579.github.io/blog/blog/technology/vue3-origin-part1/"}],["meta",{"property":"og:site_name","content":"吾园小记"}],["meta",{"property":"og:title","content":"Vue3源码总结（一）核心描述"}],["meta",{"property":"og:description","content":"Vue3源码总结（一）核心描述"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://avicii13579.github.io/blog/blog/images/technology/vue3/核心实现逻辑深度解析.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-03T10:57:33.000Z"}],["meta",{"property":"article:tag","content":"technology"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:modified_time","content":"2025-08-03T10:57:33.000Z"}]]},"readingTime":{"minutes":8.19,"words":2456},"git":{"createdTime":1754216842000,"updatedTime":1754218653000,"contributors":[{"name":"Rowan","username":"Rowan","email":"18699499130@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Rowan?v=4","url":"https://github.com/Rowan"}]},"filePathRelative":"technology/Vue3源码总结（一）核心描述.md","headers":[]}');export{h as comp,u as data};
